services:
  backend:
    container_name: backend
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      - APP_CONFIG=prod
    command: bash -c "python manage.py migrate --noinput && gunicorn config.wsgi:application -c ../gunicorn.conf.py --bind 0.0.0.0:8000"
    volumes:
      - ./static:/home/nest/backend/src/static
      - ./media:/home/nest/backend/src/media
      - ./backend/db_merge:/home/nest/backend/db_merge
    networks:
      - default_network
    depends_on:
      - celery

  celery:
    container_name: celery
    restart: always
    image: nest-backend:latest
    env_file:
      - ./backend/.env
    environment:
      - APP_CONFIG=prod
    command: bash -c "celery -A config.celery worker"
    volumes:
      - ./media:/home/nest/backend/src/media
    networks:
      - default_network

  celery-beat:
    container_name: celery-beat
    restart: always
    image: nest-backend:latest
    env_file:
      - ./backend/.env
    environment:
      - APP_CONFIG=prod
    command: bash -c "celery -A config.celery beat"
    volumes:
      - ./media:/home/nest/backend/src/media
    networks:
      - default_network

  frontend:
    container_name: frontend
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    environment:
      - REACT_APP_CONFIG=prod
    volumes:
#      - ./frontend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/nginx/cert
      - ./static:/home/nest/backend/src/static
    networks:
      - default_network
    depends_on:
      - backend

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    command: certonly --webroot --webroot-path /var/www/certbot/ -d nest.trainingdata.solutions -m s.savastyanov@trainingdta.pro -n --agree-tos

networks:
  default_network:
